// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Guild is an object representing the database table.
type Guild struct {
	ID                 int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildSnowflake     string    `boil:"guild_snowflake" json:"guild_snowflake" toml:"guild_snowflake" yaml:"guild_snowflake"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	EmbedTwitterVideos bool      `boil:"embed_twitter_videos" json:"embed_twitter_videos" toml:"embed_twitter_videos" yaml:"embed_twitter_videos"`

	R *guildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L guildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GuildColumns = struct {
	ID                 string
	GuildSnowflake     string
	CreatedAt          string
	UpdatedAt          string
	EmbedTwitterVideos string
}{
	ID:                 "id",
	GuildSnowflake:     "guild_snowflake",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	EmbedTwitterVideos: "embed_twitter_videos",
}

var GuildTableColumns = struct {
	ID                 string
	GuildSnowflake     string
	CreatedAt          string
	UpdatedAt          string
	EmbedTwitterVideos string
}{
	ID:                 "guilds.id",
	GuildSnowflake:     "guilds.guild_snowflake",
	CreatedAt:          "guilds.created_at",
	UpdatedAt:          "guilds.updated_at",
	EmbedTwitterVideos: "guilds.embed_twitter_videos",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var GuildWhere = struct {
	ID                 whereHelperint64
	GuildSnowflake     whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	EmbedTwitterVideos whereHelperbool
}{
	ID:                 whereHelperint64{field: "\"guilds\".\"id\""},
	GuildSnowflake:     whereHelperstring{field: "\"guilds\".\"guild_snowflake\""},
	CreatedAt:          whereHelpertime_Time{field: "\"guilds\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"guilds\".\"updated_at\""},
	EmbedTwitterVideos: whereHelperbool{field: "\"guilds\".\"embed_twitter_videos\""},
}

// GuildRels is where relationship names are stored.
var GuildRels = struct {
	GuildSnowflakePrefixes string
	GuildSnowflakePronouns string
}{
	GuildSnowflakePrefixes: "GuildSnowflakePrefixes",
	GuildSnowflakePronouns: "GuildSnowflakePronouns",
}

// guildR is where relationships are stored.
type guildR struct {
	GuildSnowflakePrefixes PrefixSlice  `boil:"GuildSnowflakePrefixes" json:"GuildSnowflakePrefixes" toml:"GuildSnowflakePrefixes" yaml:"GuildSnowflakePrefixes"`
	GuildSnowflakePronouns PronounSlice `boil:"GuildSnowflakePronouns" json:"GuildSnowflakePronouns" toml:"GuildSnowflakePronouns" yaml:"GuildSnowflakePronouns"`
}

// NewStruct creates a new relationship struct
func (*guildR) NewStruct() *guildR {
	return &guildR{}
}

// guildL is where Load methods for each relationship are stored.
type guildL struct{}

var (
	guildAllColumns            = []string{"id", "guild_snowflake", "created_at", "updated_at", "embed_twitter_videos"}
	guildColumnsWithoutDefault = []string{"guild_snowflake"}
	guildColumnsWithDefault    = []string{"id", "created_at", "updated_at", "embed_twitter_videos"}
	guildPrimaryKeyColumns     = []string{"id"}
)

type (
	// GuildSlice is an alias for a slice of pointers to Guild.
	// This should almost always be used instead of []Guild.
	GuildSlice []*Guild

	guildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	guildType                 = reflect.TypeOf(&Guild{})
	guildMapping              = queries.MakeStructMapping(guildType)
	guildPrimaryKeyMapping, _ = queries.BindMapping(guildType, guildMapping, guildPrimaryKeyColumns)
	guildInsertCacheMut       sync.RWMutex
	guildInsertCache          = make(map[string]insertCache)
	guildUpdateCacheMut       sync.RWMutex
	guildUpdateCache          = make(map[string]updateCache)
	guildUpsertCacheMut       sync.RWMutex
	guildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single guild record from the query.
func (q guildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Guild, error) {
	o := &Guild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for guilds")
	}

	return o, nil
}

// All returns all Guild records from the query.
func (q guildQuery) All(ctx context.Context, exec boil.ContextExecutor) (GuildSlice, error) {
	var o []*Guild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Guild slice")
	}

	return o, nil
}

// Count returns the count of all Guild records in the query.
func (q guildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count guilds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q guildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if guilds exists")
	}

	return count > 0, nil
}

// GuildSnowflakePrefixes retrieves all the prefix's Prefixes with an executor via guild_snowflake column.
func (o *Guild) GuildSnowflakePrefixes(mods ...qm.QueryMod) prefixQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"prefixes\".\"guild_snowflake\"=?", o.GuildSnowflake),
	)

	query := Prefixes(queryMods...)
	queries.SetFrom(query.Query, "\"prefixes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"prefixes\".*"})
	}

	return query
}

// GuildSnowflakePronouns retrieves all the pronoun's Pronouns with an executor via guild_snowflake column.
func (o *Guild) GuildSnowflakePronouns(mods ...qm.QueryMod) pronounQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pronouns\".\"guild_snowflake\"=?", o.GuildSnowflake),
	)

	query := Pronouns(queryMods...)
	queries.SetFrom(query.Query, "\"pronouns\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pronouns\".*"})
	}

	return query
}

// LoadGuildSnowflakePrefixes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (guildL) LoadGuildSnowflakePrefixes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuild interface{}, mods queries.Applicator) error {
	var slice []*Guild
	var object *Guild

	if singular {
		object = maybeGuild.(*Guild)
	} else {
		slice = *maybeGuild.(*[]*Guild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &guildR{}
		}
		args = append(args, object.GuildSnowflake)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guildR{}
			}

			for _, a := range args {
				if a == obj.GuildSnowflake {
					continue Outer
				}
			}

			args = append(args, obj.GuildSnowflake)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`prefixes`),
		qm.WhereIn(`prefixes.guild_snowflake in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load prefixes")
	}

	var resultSlice []*Prefix
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice prefixes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on prefixes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for prefixes")
	}

	if singular {
		object.R.GuildSnowflakePrefixes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &prefixR{}
			}
			foreign.R.GuildSnowflakeGuild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildSnowflake == foreign.GuildSnowflake {
				local.R.GuildSnowflakePrefixes = append(local.R.GuildSnowflakePrefixes, foreign)
				if foreign.R == nil {
					foreign.R = &prefixR{}
				}
				foreign.R.GuildSnowflakeGuild = local
				break
			}
		}
	}

	return nil
}

// LoadGuildSnowflakePronouns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (guildL) LoadGuildSnowflakePronouns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuild interface{}, mods queries.Applicator) error {
	var slice []*Guild
	var object *Guild

	if singular {
		object = maybeGuild.(*Guild)
	} else {
		slice = *maybeGuild.(*[]*Guild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &guildR{}
		}
		args = append(args, object.GuildSnowflake)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guildR{}
			}

			for _, a := range args {
				if a == obj.GuildSnowflake {
					continue Outer
				}
			}

			args = append(args, obj.GuildSnowflake)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pronouns`),
		qm.WhereIn(`pronouns.guild_snowflake in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pronouns")
	}

	var resultSlice []*Pronoun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pronouns")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pronouns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pronouns")
	}

	if singular {
		object.R.GuildSnowflakePronouns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pronounR{}
			}
			foreign.R.GuildSnowflakeGuild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildSnowflake == foreign.GuildSnowflake {
				local.R.GuildSnowflakePronouns = append(local.R.GuildSnowflakePronouns, foreign)
				if foreign.R == nil {
					foreign.R = &pronounR{}
				}
				foreign.R.GuildSnowflakeGuild = local
				break
			}
		}
	}

	return nil
}

// AddGuildSnowflakePrefixes adds the given related objects to the existing relationships
// of the guild, optionally inserting them as new records.
// Appends related to o.R.GuildSnowflakePrefixes.
// Sets related.R.GuildSnowflakeGuild appropriately.
func (o *Guild) AddGuildSnowflakePrefixes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Prefix) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildSnowflake = o.GuildSnowflake
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"prefixes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_snowflake"}),
				strmangle.WhereClause("\"", "\"", 2, prefixPrimaryKeyColumns),
			)
			values := []interface{}{o.GuildSnowflake, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildSnowflake = o.GuildSnowflake
		}
	}

	if o.R == nil {
		o.R = &guildR{
			GuildSnowflakePrefixes: related,
		}
	} else {
		o.R.GuildSnowflakePrefixes = append(o.R.GuildSnowflakePrefixes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &prefixR{
				GuildSnowflakeGuild: o,
			}
		} else {
			rel.R.GuildSnowflakeGuild = o
		}
	}
	return nil
}

// AddGuildSnowflakePronouns adds the given related objects to the existing relationships
// of the guild, optionally inserting them as new records.
// Appends related to o.R.GuildSnowflakePronouns.
// Sets related.R.GuildSnowflakeGuild appropriately.
func (o *Guild) AddGuildSnowflakePronouns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pronoun) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildSnowflake = o.GuildSnowflake
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pronouns\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_snowflake"}),
				strmangle.WhereClause("\"", "\"", 2, pronounPrimaryKeyColumns),
			)
			values := []interface{}{o.GuildSnowflake, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildSnowflake = o.GuildSnowflake
		}
	}

	if o.R == nil {
		o.R = &guildR{
			GuildSnowflakePronouns: related,
		}
	} else {
		o.R.GuildSnowflakePronouns = append(o.R.GuildSnowflakePronouns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pronounR{
				GuildSnowflakeGuild: o,
			}
		} else {
			rel.R.GuildSnowflakeGuild = o
		}
	}
	return nil
}

// Guilds retrieves all the records using an executor.
func Guilds(mods ...qm.QueryMod) guildQuery {
	mods = append(mods, qm.From("\"guilds\""))
	return guildQuery{NewQuery(mods...)}
}

// FindGuild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGuild(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Guild, error) {
	guildObj := &Guild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"guilds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, guildObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from guilds")
	}

	return guildObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Guild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no guilds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(guildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	guildInsertCacheMut.RLock()
	cache, cached := guildInsertCache[key]
	guildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			guildAllColumns,
			guildColumnsWithDefault,
			guildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(guildType, guildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(guildType, guildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"guilds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"guilds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into guilds")
	}

	if !cached {
		guildInsertCacheMut.Lock()
		guildInsertCache[key] = cache
		guildInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Guild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Guild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	guildUpdateCacheMut.RLock()
	cache, cached := guildUpdateCache[key]
	guildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			guildAllColumns,
			guildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update guilds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"guilds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, guildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(guildType, guildMapping, append(wl, guildPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update guilds row")
	}

	if !cached {
		guildUpdateCacheMut.Lock()
		guildUpdateCache[key] = cache
		guildUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q guildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for guilds")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GuildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"guilds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, guildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in guild slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Guild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no guilds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(guildColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	guildUpsertCacheMut.RLock()
	cache, cached := guildUpsertCache[key]
	guildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			guildAllColumns,
			guildColumnsWithDefault,
			guildColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			guildAllColumns,
			guildPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert guilds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(guildPrimaryKeyColumns))
			copy(conflict, guildPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"guilds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(guildType, guildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(guildType, guildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert guilds")
	}

	if !cached {
		guildUpsertCacheMut.Lock()
		guildUpsertCache[key] = cache
		guildUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Guild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Guild) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no Guild provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), guildPrimaryKeyMapping)
	sql := "DELETE FROM \"guilds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from guilds")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q guildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no guildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from guilds")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GuildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, guildPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from guild slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Guild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGuild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GuildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GuildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"guilds\".* FROM \"guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, guildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GuildSlice")
	}

	*o = slice

	return nil
}

// GuildExists checks if the Guild row exists.
func GuildExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"guilds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if guilds exists")
	}

	return exists, nil
}
